% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/loadtest.R
\name{loadtest}
\alias{loadtest}
\title{Run a load test of an HTTP request}
\usage{
loadtest(
  url,
  method = c("GET", "POST", "HEAD", "TRACE", "OPTIONS", "PUT", "DELETE"),
  http_headers = NULL,
  post_body = NULL,
  encode = c("raw", "json"),
  threads = 1,
  loops = 16,
  ramp_time = 0,
  delay_per_request = 0,
  warmup = 2
)
}
\arguments{
\item{url}{The url to hit as part of the test, such as https://www.t-mobile.com .}

\item{method}{The HTTP method to use. Defaults to "GET" but other common choices are "POST", "PUT", and "DELETE".}

\item{http_headers}{A named list of headers to use as part of HTTP request. The names are the keys and the contents are the values.}

\item{post_body}{A list to be encoded as a json object to use as the body of the HTTP request.}

\item{encode}{The method of encoding the body, if it exists.}

\item{threads}{The number of threads to concurrently run in the test.}

\item{loops}{The number of times each thread should hit the endpoint.}

\item{ramp_time}{The time (in seconds) that it should take before all threads are firing.}

\item{delay_per_request}{A delay (in milliseconds) after a thread completes before it should make its next request.}

\item{warmup}{The number of times each thread should hit the endpoint before capturing the output.
Raw assumes the body is a character and preserves it.
Json converts a list into json like the pacakge httr.}
}
\value{
A data.frame containing the JMeter test results of the HTTP requests made during the tests. The columns
have the following specification.
\describe{
  \item{request_id}{An intentifier for each request. An integer from 1 to the number of requests}
  \item{start_time}{The time the request was started, as a POSIXct.}
  \item{thread}{The thread the request was made from (from 1 to n, where n is the number of threads)}
  \item{threads}{The number of open threads at the time the request was made. Should decrease to 1 as the requests finish.}
  \item{response_code}{The response code of the HTTP request, such as 200, 403, or 500.
  A character that should be able to be converted to an integer, but may be a string be if an error occurred.}
  \item{response_message}{The message of the response. May be an error if the request fails.}
  \item{request_status}{A factor for if the request succeeded (Success/Failure)}
  \item{sent_bytes}{The number of bytes sent in the request.}
  \item{received_bytes}{The number of bytes received in the request.}
  \item{time_since_start}{The number of milliseconds after the test started that the request started.
  Useful for plotting the time the request occurred relative to the start of the test.
  You will need to add other values to this (such as elapsed) to measure end times of requests.}
  \item{elapsed}{The number of milliseconds that elapsed between when the request started and when the response was finished being received.}
  \item{latency}{The number of milliseconds that elapsed between when the request started and when the response began. Thus, this
  does not include the time it takes to receive the request, which can matter for a large download.
  This is included in the elapsed time (and is at most equal to).}
  \item{connect}{The number of milliseconds needed to make the connection. This is included in both the elapsed and latency measures,
  but it may need to be removed depending on what should be measured.}
}
}
\description{
This is the core function of the package, which creates many HTTP requests using Apache JMeter.
In this function, you specify a URL and HTTP method along with how many times to hit the URL,
then the function calls JMeter to run a load test. For requests that require special headers or
a body, you can specify them as well.
}
\examples{
# a simple GET request
results <- loadtest(url = "https://www.t-mobile.com", threads = 2, loops = 5)

# a more complex POST request
results <- loadtest(url = "http://deepmoji.teststuff.biz",
                    method = "POST",
                    http_headers = c("version"="v1.0"),
                    post_body = list(sentences = list("I love this band")),
                    encode = "json",
                    threads = 1,
                    loops = 15,
                    delay_per_request = 100)
}
